package net.theluckycoder.familyphotos.model

import android.net.Uri
import android.os.Parcelable
import androidx.annotation.Keep
import androidx.room.Entity
import androidx.room.Ignore
import androidx.room.PrimaryKey
import kotlinx.parcelize.Parcelize
import kotlinx.serialization.Serializable
import net.theluckycoder.familyphotos.network.NetworkModule

@Serializable
sealed class Photo : Parcelable {

    abstract val id: Long
    abstract val name: String
    abstract val timeCreated: Long

    override fun hashCode(): Int {
        throw NotImplementedError("This should not be used directly")
    }

    override fun equals(other: Any?): Boolean {
        throw NotImplementedError("This should not be used directly")
    }
}

@Keep
@Serializable
@Parcelize
@Entity(tableName = "local_photo")
data class LocalPhoto(
    @PrimaryKey
    override val id: Long,
    val networkPhotoId: Long = 0L,
    override val name: String,
    override val timeCreated: Long,
    val folder: String?,
    @Serializable(UriAsStringSerializer::class)
    val uri: Uri,
    val mimeType: String? = null,
) : Photo(), Parcelable {

    /*override fun hashCode(): Int = id.hashCode() // the ID's are generated by the Android Framework and are integers anyway

    override fun equals(other: Any?): Boolean {
        if (other is LocalPhoto)
            return id == other.id
        return false
    }*/

    val isSavedToCloud: Boolean
        @Ignore
        get() = networkPhotoId != 0L
}

@Keep
@Serializable
@Parcelize
@Entity(tableName = "network_photo")
data class NetworkPhoto(
    @PrimaryKey
    override val id: Long,
    val ownerUserId: Long,
    override val name: String,
    override val timeCreated: Long,
    val folder: String?,
) : Photo(), Parcelable {

    /*override fun hashCode(): Int = id.hashCode()

    override fun equals(other: Any?): Boolean {
        if (other is LocalPhoto)
            return id == other.id
        return false
    }*/
}

private val videoExtensions = arrayOf(
    "WEBM", "MPG", "MP2", "MPEG", "MPE", "MPV", "OGG", "MP4", "M4P", "M4V", "AVI", "WMV",
    "MOV", "MKV"
)

val Photo.isVideo
    get() = when (this) {
        is NetworkPhoto -> videoExtensions.contains(name.substringAfterLast('.').uppercase())
        is LocalPhoto ->
            mimeType?.startsWith("video/") ?: false
    }

fun Photo.getUri(): Uri = when (this) {
    is NetworkPhoto -> Uri.parse(getDownloadUrl())
    is LocalPhoto -> uri
}

fun NetworkPhoto.getDownloadUrl(): String =
    "${NetworkModule.BASE_URL}photos/$ownerUserId/download/$id"
